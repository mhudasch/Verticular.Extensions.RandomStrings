# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- dev
- release/*
pr:
- master
- dev
- release/*

name: $(Date:yyyyMMdd)$(Rev:-r)

pool:
  vmImage: 'windows-latest'

steps:

#######################################################
# DOTNET RESTORE
#######################################################

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    restoreArguments: '--no-cache --runtime $(Build.TargetRuntime) -p:IncludeFullFramework="$(Build.IncludeFullFramework)" -p:IncludeLatestCoreFramework="$(Build.IncludeLatestCoreFramework)" -p:IncludeLatestFullFramework="$(Build.IncludeLatestFullFramework)" -p:IncludeLatestStandardFramework="$(Build.IncludeLatestStandardFramework)"'
    feedsToUse: 'select'
    verbosityRestore: Minimal

#######################################################
# DOTNET BUILD
#######################################################

- task: DotNetCoreCLI@2
  displayName: 'dotnet build (binaries)'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(Build.Configuration) --no-restore --no-incremental -p:GitRevisionNumber="$(Build.SourceVersion)" -p:GitBranchName="$(Build.SourceBranchName)" -p:BuildNumber="$(Build.BuildNumber)" -p:CIBuilder="VSTS" --runtime $(Build.TargetRuntime) -p:IncludeFullFramework="$(Build.IncludeFullFramework)" -p:IncludeLatestCoreFramework="$(Build.IncludeLatestCoreFramework)" -p:IncludeLatestFullFramework="$(Build.IncludeLatestFullFramework)" -p:IncludeLatestStandardFramework="$(Build.IncludeLatestStandardFramework)"'

#######################################################
# DOTNET TEST
#######################################################

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/test/**/*.csproj'
    publishTestResults: true
    arguments: '--configuration $(Build.Configuration) --collect "Code coverage" --no-build --no-restore --runtime $(Build.TargetRuntime)'

- task: CopyFiles@2
  displayName: 'copy test results for publishing'
  inputs:
    SourceFolder: '$(agent.TempDirectory)'
    Contents: |
      **/*.trx
      **/*.coverage
    TargetFolder: '$(System.DefaultWorkingDirectory)/TestResults'

#######################################################
# DOTNET TEST
#######################################################

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  inputs:
    command: 'custom'
    projects: '**/*.csproj'
    custom: 'pack'
    arguments: '--configuration $(Build.Configuration) --no-build --include-symbols --include-source --verbosity minimal --serviceable --output "$(System.DefaultWorkingDirectory)/nuget" -p:GitRevisionNumber="$(Build.SourceVersion)" -p:GitBranchName="$(Build.SourceBranchName)" -p:BuildNumber="$(Build.BuildNumber)" -p:CIBuilder="VSTS" --runtime $(Build.TargetRuntime) -p:IncludeFullFramework="$(Build.IncludeFullFramework)" -p:IncludeLatestCoreFramework="$(Build.IncludeLatestCoreFramework)" -p:IncludeLatestFullFramework="$(Build.IncludeLatestFullFramework)" -p:IncludeLatestStandardFramework="$(Build.IncludeLatestStandardFramework)"'


#######################################################
# HERE BEGINS THE SONAR BLOCK
#######################################################

- task: SonarCloudPrepare@1
  displayName: 'begin analysis (sonar)'
  condition: and(succeeded(), or(contains(variables['Build.SourceBranchName'], 'master'), contains(variables['Build.SourceBranchName'], 'release')))
  inputs:
    SonarCloud: 'mhudasch-sonar'
    organization: '$(Sonar.Organization)'
    scannerMode: 'MSBuild'
    projectKey: '$(Sonar.ProjectKey)'
    projectName: '$(Sonar.ProjectName)'
    projectVersion: '$(Sonar.AnalyzedVersion)'
    extraProperties: |
      sonar.verbose=$(Sonar.Verbose)

- task: DotNetCoreCLI@2
  displayName: 'dotnet build (sonar)'
  condition: and(succeeded(), or(contains(variables['Build.SourceBranchName'], 'master'), contains(variables['Build.SourceBranchName'], 'release')))
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(Build.Configuration) --no-restore --no-incremental --runtime $(Build.TargetRuntime) -p:GitRevisionNumber="$(Build.SourceVersion)" -p:GitBranchName="$(Build.SourceBranchName)" -p:BuildNumber="$(Build.BuildNumber)" -p:CIBuilder="VSTS" -p:IncludeLatestCoreFramework="$(Build.IncludeLatestCoreFramework)" -p:IncludeLatestFullFramework="$(Build.IncludeLatestFullFramework)" -p:IncludeLatestStandardFramework="$(Build.IncludeLatestStandardFramework)"'

- task: SonarCloudAnalyze@1
  displayName: 'execute analysis (sonar)'
  condition: and(succeeded(), or(contains(variables['Build.SourceBranchName'], 'master'), contains(variables['Build.SourceBranchName'], 'release')))

- task: SonarCloudPublish@1
  displayName: 'end analysis (sonar)'
  condition: and(succeeded(), or(contains(variables['Build.SourceBranchName'], 'master'), contains(variables['Build.SourceBranchName'], 'release')))
  inputs:
    pollingTimeoutSec: '300'

#######################################################
# DOTNET PUBLISH
#######################################################

- task: DotNetCoreCLI@2
  displayName: 'push to nuget org'
  condition: and(succeeded(), eq(variables['Publish.NugetOrg'], 'true'), or(contains(variables['Build.SourceBranchName'], 'master'), contains(variables['Build.SourceBranchName'], 'release')))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nuget.org'

#######################################################
# PUT TOGETHER ARTIFACTS
#######################################################

- task: CopyFiles@2
  displayName: 'stage nugets'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/nuget'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/nuget'
    CleanTargetFolder: true
    OverWrite: true
    flattenFolders: true
    preserveTimestamp: true

- task: CopyFiles@2
  displayName: 'stage test results'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/TestResults'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/tr'
    CleanTargetFolder: true
    OverWrite: true
    flattenFolders: true
    preserveTimestamp: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
